{"version":3,"file":"bundle.js","mappings":"AA4FAA,SAASC,eAAe,cAAcC,iBAAiB,UAAUC,eAAeC,GAC5EA,EAAMC,iBACN,MAAMC,EAAWN,SAASC,eAAe,YAAYM,MAC/CC,EAAQR,SAASC,eAAe,SAASM,MACzCE,EAAWT,SAASC,eAAe,YAAYM,YA/FzDJ,eAAsBG,EAAUE,EAAOC,GACnC,IACI,MAAMC,QAAiBC,MAAM,aAAc,CACvCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEV,WAAUE,QAAOC,eAG5C,GAAIC,EAASO,GAAI,CACb,MAAMC,QAAgBR,EAASS,OAE/B,OADAC,QAAQC,IAAI,+BAAgCH,GACrCA,CACX,CAAO,CACH,MAAMI,QAAqBZ,EAASa,OACpC,MAAM,IAAIC,MAAMF,EACpB,CACJ,CAAE,MAAOG,GAEL,MADAL,QAAQK,MAAM,oBAAqBA,EAAMC,SACnCD,CACV,CACJ,CA0EUE,CAAOrB,EAAUE,EAAOC,EAClC,IAGAT,SAASC,eAAe,oBAAoBC,iBAAiB,UAAUC,eAAeC,GAClFA,EAAMC,iBACN,MAAMuB,EAAe,IAAIC,SAASC,YA7EtC3B,eAA4ByB,GACxB,IACI,MAAMlB,QAAiBC,MAAM,uBAAwB,CACjDC,OAAQ,OACRE,KAAMc,IAGV,IAAKlB,EAASO,GACV,MAAM,IAAIO,MAAM,8CAGpB,MAAMO,QAAqBrB,EAASS,OACpCC,QAAQC,IAAI,gCAAiCU,EACjD,CAAE,MAAON,GAEL,MADAL,QAAQK,MAAM,0BAA2BA,EAAMC,SACzCD,CACV,CACJ,CA6DUO,CAAaJ,EACvB,IAGA5B,SAASC,eAAe,sBAAsBC,iBAAiB,UAAUC,eAAeC,GACpFA,EAAMC,uBA/DVF,eAA2C8B,GACvC,IACI,MAAMvB,QAAiBC,MAAM,yBAA0B,CACnDC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAyDG,CAAC,KAtDnB,IAAKN,EAASO,GACV,MAAM,IAAIO,MAAM,kDAGpB,MAAMU,QAAmBxB,EAASS,OAClCgB,qBAAqBD,GACrBE,uBAAuBF,EAC3B,CAAE,MAAOT,GAEL,MADAL,QAAQK,MAAM,8BAA+BA,EAAMC,SAC7CD,CACV,CACJ,CA4CUY,EACV,IAGArC,SAASC,eAAe,mBAAmBC,iBAAiB,SAASC,eAAeC,GAChFA,EAAMC,uBA9CVF,eAAoCmC,EAAQC,GACxC,IASI,WARuB5B,MAAO,+BAAiC,CAC3DC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEuB,WAyCZ,mBAtCDtB,GACV,MAAM,IAAIO,MAAM,0DAGpBJ,QAAQC,IAAI,2CAChB,CAAE,MAAOI,GAEL,MADAL,QAAQK,MAAM,qCAAsCA,EAAMC,SACpDD,CACV,CACJ,CA8BUe,EACV","sources":["webpack://quicksearch-estates-frontend/./src/index.js"],"sourcesContent":["// Function to handle user registration\nasync function signUp(username, email, password) {\n    try {\n        const response = await fetch('/api/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ username, email, password })\n        });\n\n        if (response.ok) {\n            const newUser = await response.json();\n            console.log('User signed up successfully:', newUser);\n            return newUser;\n        } else {\n            const errorMessage = await response.text();\n            throw new Error(errorMessage);\n        }\n    } catch (error) {\n        console.error('Error signing up:', error.message);\n        throw error;\n    }\n}\n\n// Function to list a property by a seller\nasync function listProperty(propertyData) {\n    try {\n        const response = await fetch('/api/properties/list', {\n            method: 'POST',\n            body: propertyData\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to list property. Please try again.');\n        }\n\n        const responseData = await response.json();\n        console.log('Property listed successfully:', responseData);\n    } catch (error) {\n        console.error('Error listing property:', error.message);\n        throw error;\n    }\n}\n\n// Function to search properties with filters\nasync function searchPropertiesWithFilters(filters) {\n    try {\n        const response = await fetch('/api/properties/search', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(filters)\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to search properties. Please try again.');\n        }\n\n        const properties = await response.json();\n        displaySearchResults(properties);\n        displayPropertiesOnMap(properties);\n    } catch (error) {\n        console.error('Error searching properties:', error.message);\n        throw error;\n    }\n}\n\n// Function to save a property as a favorite for a user\nasync function saveFavoriteProperty(userId, propertyId) {\n    try {\n        const response = await fetch(`/api/users/${userId}/favorites`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ propertyId })\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to save property as favorite. Please try again.');\n        }\n\n        console.log('Property saved as favorite successfully.');\n    } catch (error) {\n        console.error('Error saving property as favorite:', error.message);\n        throw error;\n    }\n}\n\n// Event listener for user registration form submission\ndocument.getElementById('signUpForm').addEventListener('submit', async function(event) {\n    event.preventDefault(); // Prevent default form submission behavior\n    const username = document.getElementById('username').value;\n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n    await signUp(username, email, password);\n});\n\n// Event listener for property listing form submission (for sellers)\ndocument.getElementById('listPropertyForm').addEventListener('submit', async function(event) {\n    event.preventDefault(); // Prevent default form submission behavior\n    const propertyData = new FormData(this);\n    await listProperty(propertyData);\n});\n\n// Event listener for property search form submission (for buyers)\ndocument.getElementById('propertySearchForm').addEventListener('submit', async function(event) {\n    event.preventDefault(); // Prevent default form submission behavior\n    const searchFilters = {}; // Implement logic to collect search filters from the form\n    await searchPropertiesWithFilters(searchFilters);\n});\n\n// Event listener for saving a property as favorite\ndocument.getElementById('saveFavoriteBtn').addEventListener('click', async function(event) {\n    event.preventDefault(); // Prevent default link behavior\n    const userId = 'user123'; // Replace with the logged-in user's ID\n    const propertyId = 'property456'; // Replace with the ID of the property to save\n    await saveFavoriteProperty(userId, propertyId);\n});\n\n"],"names":["document","getElementById","addEventListener","async","event","preventDefault","username","value","email","password","response","fetch","method","headers","body","JSON","stringify","ok","newUser","json","console","log","errorMessage","text","Error","error","message","signUp","propertyData","FormData","this","responseData","listProperty","filters","properties","displaySearchResults","displayPropertiesOnMap","searchPropertiesWithFilters","userId","propertyId","saveFavoriteProperty"],"sourceRoot":""}